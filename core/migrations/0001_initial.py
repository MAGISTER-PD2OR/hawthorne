# Generated by Django 2.0 on 2018-01-21 16:44

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
  initial = True

  dependencies = [
    ('auth', '0009_alter_user_last_name_max_length'),
  ]

  operations = [
    migrations.CreateModel(
      name='User',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('password', models.CharField(max_length=128, verbose_name='password')),
        ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
        ('is_superuser', models.BooleanField(default=False,
                                             help_text='Designates that this user has all permissions without explicitly assigning them.',
                                             verbose_name='superuser status')),
        ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                      help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                      max_length=150, unique=True,
                                      validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                      verbose_name='username')),
        ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
        ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
        ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
        ('is_staff', models.BooleanField(default=False,
                                         help_text='Designates whether the user can log into this admin site.',
                                         verbose_name='staff status')),
        ('is_active', models.BooleanField(default=True,
                                          help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                          verbose_name='active')),
        ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
        ('steamid', models.CharField(max_length=17, null=True)),
        ('ip', models.GenericIPAddressField(null=True)),
        ('avatar', models.URLField(null=True)),
        ('profile', models.URLField(null=True)),
      ],
      options={
        'permissions': [('view_user', 'View users'), ('kick_user', 'Kick a user'),
                        ('search_user', 'Search for users')],
      },
      managers=[
        ('objects', django.contrib.auth.models.UserManager()),
      ],
    ),
    migrations.CreateModel(
      name='Ban',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('reason', models.CharField(max_length=255)),
        ('length', models.DurationField()),
        ('resolved', models.BooleanField(default=False)),
        ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ban_issuer',
                                     to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'permissions': [('view_ban', 'View bans'), ('modify_ban', 'Edit a ban')],
      },
    ),
    migrations.CreateModel(
      name='Chat',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('ip', models.GenericIPAddressField()),
        ('message', models.CharField(max_length=255)),
        ('command', models.BooleanField(default=False)),
      ],
      options={
        'permissions': [('view_chat', 'View chat logs'), ('view_chat_ip', 'View ip of someone in chat logs'),
                        ('view_chat_server', 'View current server of someone in chat logs'),
                        ('view_chat_time', 'View current time of message in chat logs')],
      },
    ),
    migrations.CreateModel(
      name='Country',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('code', models.CharField(max_length=2, unique=True)),
        ('name', models.CharField(max_length=100, null=True)),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='Log',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('action', models.CharField(max_length=255)),
        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'permissions': [('view_admin_log', 'View server logs')],
      },
    ),
    migrations.CreateModel(
      name='Mutegag',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('type',
         models.CharField(choices=[('MU', 'mute'), ('GA', 'gag'), ('BO', 'both')], default='MU', max_length=2)),
        ('reason', models.CharField(max_length=255)),
        ('length', models.DurationField()),
        ('resolved', models.BooleanField(default=False)),
        ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mutegag_issuer',
                                     to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'permissions': [('view_mutegag', 'View mutegags'), ('add_mutegag_mute', 'Add mutegag mutes'),
                        ('add_mutegag_gag', 'Add mutegag gags'), ('modify_mutegag', 'Edit mutegags')],
      },
    ),
    migrations.CreateModel(
      name='PanelGroup',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('name', models.CharField(max_length=255)),
        ('flags', models.CharField(max_length=25)),
        ('immunity', models.DurationField()),
        ('usetime', models.DurationField()),
        ('isadmingroup', models.BooleanField(default=False)),
      ],
      options={
        'permissions': [('view_admin_group', 'View server groups'), ('add_admin_group', 'Add server groups'),
                        ('modify_admin_group', 'Edit server groups'),
                        ('delete_admin_group', 'Delete server groups')],
      },
    ),
    migrations.CreateModel(
      name='PanelPermission',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('can_reservation', models.BooleanField(default=False)),
        ('can_generic', models.BooleanField(default=False)),
        ('can_ban', models.BooleanField(default=False)),
        ('can_slay', models.BooleanField(default=False)),
        ('can_map', models.BooleanField(default=False)),
        ('can_cvar', models.BooleanField(default=False)),
        ('can_vote', models.BooleanField(default=False)),
        ('can_password', models.BooleanField(default=False)),
        ('can_rcon', models.BooleanField(default=False)),
        ('can_cheat', models.BooleanField(default=False)),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='Server',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('name', models.CharField(max_length=255)),
        ('ip', models.GenericIPAddressField()),
        ('port', models.IntegerField()),
        ('password', models.CharField(max_length=255)),
      ],
      options={
        'permissions': [('view_server', 'View the servers'), ('modify_server', 'Edit a server')],
      },
    ),
    migrations.CreateModel(
      name='ServerRole',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PanelGroup')),
        ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Server')),
        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'permissions': [('view_admin_role', 'View server roles'), ('add_admin_role', 'Add server roles'),
                        ('modify_admin_role', 'Edit server roles'),
                        ('delete_admin_role', 'Delete server roles')],
      },
    ),
    migrations.CreateModel(
      name='UserLogIP',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('ip', models.GenericIPAddressField()),
        ('connections', models.IntegerField(default=0)),
        ('active', models.BooleanField(default=False)),
        ('last_used', models.DateTimeField(auto_now=True)),
        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='UserLogTime',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('connected', models.DateTimeField(auto_now_add=True)),
        ('disconnected', models.DateTimeField()),
        ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Server')),
        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='UserLogUsername',
      fields=[
        ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True,
                                serialize=False, unique=True)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('username', models.CharField(max_length=128)),
        ('connections', models.IntegerField()),
        ('last_used', models.DateTimeField()),
        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.AlterUniqueTogether(
      name='server',
      unique_together={('ip', 'port')},
    ),
    migrations.AddField(
      model_name='panelgroup',
      name='permissions',
      field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.PanelPermission'),
    ),
    migrations.AddField(
      model_name='mutegag',
      name='server',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Server'),
    ),
    migrations.AddField(
      model_name='mutegag',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='chat',
      name='server',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Server'),
    ),
    migrations.AddField(
      model_name='chat',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='ban',
      name='server',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Server'),
    ),
    migrations.AddField(
      model_name='ban',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='user',
      name='country',
      field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Country'),
    ),
    migrations.AddField(
      model_name='user',
      name='groups',
      field=models.ManyToManyField(blank=True,
                                   help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                   related_name='user_set', related_query_name='user', to='auth.Group',
                                   verbose_name='groups'),
    ),
    migrations.AddField(
      model_name='user',
      name='user_permissions',
      field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                   related_name='user_set', related_query_name='user', to='auth.Permission',
                                   verbose_name='user permissions'),
    ),
  ]
