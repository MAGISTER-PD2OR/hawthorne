# Generated by Django 2.0.5 on 2018-05-28 09:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Ban = apps.get_model("core", "Ban")
    Mutegag = apps.get_model("core", "Mutegag")
    Punishment = apps.get_model("core", "Punishment")
    db_alias = schema_editor.connection.alias

    converted = []
    for obj in Ban.objects.using(db_alias).all():
        tmp = Punishment(user=obj.user,
                         server=obj.server,
                         reason=obj.reason,
                         length=obj.length,
                         resolved=obj.resolved,
                         is_banned=True,
                         created_by=obj.created_by,
                         created_at=obj.created_at,
                         updated_by=obj.updated_by,
                         updated_at=obj.updated_at)

        converted.append(tmp)

    for obj in Mutegag.objects.using(db_alias).all():
        muted = False
        gagged = False

        if obj.type == "MU":
            muted = True
        elif obj.type == "GA":
            gagged = True
        else:
            muted = True
            gagged = True

        tmp = Punishment(user=obj.user,
                         server=obj.server,
                         reason=obj.reason,
                         length=obj.length,
                         resolved=obj.resolved,
                         is_muted=muted,
                         is_gagged=gagged,
                         created_by=obj.created_by,
                         created_at=obj.created_at,
                         updated_by=obj.updated_by)

        converted.append(tmp)

    Punishment.objects.using(db_alias).bulk_create(converted)


def reverse_func(apps, schema_editor):
    Ban = apps.get_model("core", "Ban")
    Mutegag = apps.get_model("core", "Mutegag")
    Punishment = apps.get_model("core", "Punishment")
    db_alias = schema_editor.connection.alias

    bans = []
    mutes = []
    for obj in Punishment.objects.using(db_alias).all():
        if obj.is_banned:
            target = Ban
        else:
            target = Mutegag

        tmp = target(user=obj.user,
                     server=obj.server,
                     reason=obj.reason,
                     length=obj.length,
                     resolved=obj.resolved,
                     created_by=obj.created_by,
                     created_at=obj.created_at,
                     updated_by=obj.updated_by)

        if obj.is_banned:
            bans.append(tmp)
        elif obj.is_muted and obj.is_gagged:
            tmp.type = "BO"
            mutes.append(tmp)
        elif obj.is_muted:
            tmp.type = "MU"
            mutes.append(tmp)
        elif obj.is_muted:
            tmp.type = "GA"
            mutes.append(tmp)

    Ban.objects.using(db_alias).bulk_create(bans)
    Mutegag.objects.using(db_alias).bulk_create(mutes)
    Punishment.objects.using(db_alias).all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0060_servergroup_tag'),
    ]

    operations = [
        migrations.CreateModel(
            name='Punishment',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reason', models.CharField(max_length=255)),
                ('length', models.DurationField(null=True)),
                ('resolved', models.BooleanField(default=False)),
                ('is_banned', models.BooleanField(default=False)),
                ('is_muted', models.BooleanField(default=False)),
                ('is_gagged', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='punishment_created_by', to=settings.AUTH_USER_MODEL)),
                ('server', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Server')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='punishment_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('view_punishment', 'Can view punishments')],
            },
        ),
        migrations.RunPython(forwards_func, reverse_func),
        migrations.RemoveField(
            model_name='ban',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='ban',
            name='server',
        ),
        migrations.RemoveField(
            model_name='ban',
            name='updated_by',
        ),
        migrations.RemoveField(
            model_name='ban',
            name='user',
        ),
        migrations.RemoveField(
            model_name='mutegag',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='mutegag',
            name='server',
        ),
        migrations.RemoveField(
            model_name='mutegag',
            name='updated_by',
        ),
        migrations.RemoveField(
            model_name='mutegag',
            name='user',
        ),
        migrations.DeleteModel(
            name='Ban',
        ),
        migrations.DeleteModel(
            name='Mutegag',
        ),
    ]
