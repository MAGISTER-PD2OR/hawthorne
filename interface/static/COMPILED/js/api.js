// Generated by CoffeeScript 2.1.1
(function() {
  
var cssPath = function(el) {
    if (!(el instanceof Element)) return;
    var path = [];
    while (el.nodeType === Node.ELEMENT_NODE) {
        if (el.nodeName.toLowerCase() === 'body') {
          return path.join(" > ");
        }

        var selector = el.nodeName.toLowerCase();
        if (el.id) {
            selector += '#' + el.id;
        } else {
            var sib = el, nth = 1;
            while (sib.nodeType === Node.ELEMENT_NODE && (sib = sib.previousSibling) && nth++);
            selector += ":nth-child("+nth+")";
        }
        path.unshift(selector);
        el = el.parentNode;
    }
    return path.join(" > ");
}
;
  var edit, group, remove, save, server, submit;

  server = function(query, that = null, selected = '') {
    $({
      'query': query
    }).ajax('/api/v1/servers', 'GET', function(data, status) {
      var ele, fmt, formatted, j, len;
      data = JSON.parse(data);
      data = data['result'];
      if (that !== null) {
        formatted = [
          {
            'value': 'all',
            'label': '<b>all</b>'
          }
        ];
        if (selected === 'all') {
          formatted[0].selected = true;
        }
        for (j = 0, len = data.length; j < len; j++) {
          ele = data[j];
          fmt = {
            value: ele.id,
            label: ele.name
          };
          if (selected !== '' && fmt.value === selected) {
            fmt.selected = true;
          }
          formatted.push(fmt);
        }
        that.setChoices(formatted, 'value', 'label', true);
      }
      return data;
    });
  };

  group = function(query, that = null, selected = '') {
    $({
      'query': query
    }).ajax('/api/v1/roles', 'GET', function(data, status) {
      var ele, fmt, formatted, j, len;
      data = JSON.parse(data);
      data = data['result'];
      if (that !== null) {
        formatted = [];
        for (j = 0, len = data.length; j < len; j++) {
          ele = data[j];
          fmt = {
            value: ele.id,
            label: ele.name,
            customProperties: {
              server: ele.server
            }
          };
          if (selected !== '' && fmt.value === selected) {
            fmt.selected = true;
          }
          formatted.push(fmt);
        }
        that.setChoices(formatted, 'value', 'label', true);
      }
      return data;
    });
  };

  remove = function(mode = '', that) {
    var endpoint, node, payload, role, state, user;
    state = that.getAttribute('class');
    if (!state.match(/confirmation/)) {
      state += ' explicit red confirmation';
      that.setAttribute('class', state);
      return;
    }
    payload = {};
    node = that.parentElement.parentElement.parentElement;
    switch (mode) {
      case 'admin__administrator':
        user = $(node.querySelector('input.uuid')).val();
        role = $(node.querySelector('input.role')).val();
        payload = {
          reset: true,
          role: role
        };
        endpoint = window.endpoint.users[user];
        break;
      case 'admin__groups':
        role = $(node.querySelector('input.uuid')).val();
        endpoint = window.endpoint.roles[role];
        break;
      case 'ban':
        user = $(node.querySelector('input.user')).val();
        server = $(node.querySelector('input.server')).val();
        payload = {
          server: server
        };
        endpoint = window.endpoint.users[user].ban;
        break;
      case 'mutegag':
        user = $(node.querySelector('input.user')).val();
        server = $(node.querySelector('input.server')).val();
        if (server !== '') {
          payload = {
            server: server
          };
        }
        endpoint = window.endpoint.users[user].mutegag;
        break;
      case 'server':
        node = that.parentElement.parentElement.parentElement.parentElement;
        server = $(node.querySelector('input.uuid')).val();
        endpoint = window.endpoint.servers[server];
        break;
      default:
        return;
    }
    endpoint.delete(payload, function(err, data) {
      if (data.success) {
        return $(node).remove();
      }
    });
  };

  save = function(mode = '', that) {
    var data, i, j, k, len, len1, node, old, payload, payloads, ref, replacement, role, scope, selector, state, success, time, uuid;
    node = that.parentElement.parentElement.parentElement;
    switch (mode) {
      case 'admin__administrator':
        role = $(node.querySelector('input.role')).val();
        uuid = $(node.querySelector('input.uuid')).val();
        selector = window.api.storage[uuid + '#' + role];
        replacement = selector.getValue(true);
        payloads = [
          payload = {
            promotion: false,
            role: role
          },
          payload = {
            promotion: true,
            role: replacement
          }
        ];
        success = 0;
        for (j = 0, len = payloads.length; j < len; j++) {
          payload = payloads[j];
          window.endpoint.users[uuid].post(payload, function(err, data) {
            if (!data.success) {
              return;
            }
            return success += 1;
          });
        }
        state = that.getAttribute('class');
        old = state;
        if (success === 2) {
          state += ' explicit red';
        } else {
          state += ' explicit green';
        }
        that.setAttribute('class', state);
        setTimeout(function() {
          return that.setAttribute('class', old);
        }, 1200);
        break;
      case 'admin__groups':
        scope = cssPath(node);
        uuid = $(`${scope} input.uuid`).val();
        console.log(uuid);
        data = {
          name: $(`${scope} .name span`).html(),
          server: window.api.storage[uuid].getValue(true),
          immunity: parseInt($(`${scope} .immunity span`).html().match(/([0-9]|[1-8][0-9]|9[0-9]|100)(?:%)?$/)[1]),
          usetime: -1,
          flags: ''
        };
        $(`${scope} .immunity span`).html(`${data.immunity}%`);
        if (data.server === 'all') {
          data.server = null;
        }
        ref = $(`${scope} .actions input:checked`);
        for (k = 0, len1 = ref.length; k < len1; k++) {
          i = ref[k];
          data.flags += $(i).val();
        }
        time = $(`${scope} .usetime span`).html();
        if (time === !null || time !== '') {
          data.usetime = window.style.duration.parse(time);
        }
        window.endpoint.roles[uuid].post(data, function(err, data) {
          state = that.getAttribute('class');
          old = state;
          if (data.success) {
            state += ' explicit green';
          } else {
            state += ' explicit red';
          }
          that.setAttribute('class', state);
          setTimeout(function() {
            return that.setAttribute('class', old);
          }, 1200);
          return data;
        });
        break;
      case 'ban':
        console.log('placeholder');
        break;
      case 'mutegag':
        console.log('placeholder');
        break;
      case 'server':
        console.log('placeholder');
    }
  };

  edit = function(mode = '', that) {
    var actions, node, scope, selected, selector, target, trigger, uuid;
    if (that.getAttribute('class').match(/save/)) {
      // this is for the actual process of saving
      save(mode, that);
      return;
    }
    node = that.parentElement.parentElement.parentElement;
    trigger = that.getAttribute('onclick');
    // this is for converting the style to be editable.
    switch (mode) {
      case 'admin__administrator':
        group = node.querySelector('.icon.group');
        uuid = $(node.querySelector('input.uuid')).val();
        selected = $(node.querySelector('input.role')).val();
        target = group.querySelector('span');
        $(target).remove();
        $(group).htmlAppend(`<select id='group-${uuid + '---' + selected}'></select>`);
        selector = new Choices(`#group-${uuid + '---' + selected}`, {
          searchEnabled: false,
          choices: [],
          classNames: {
            containerOuter: 'choices edit'
          }
        });
        selector.passedElement.addEventListener('change', function(e) {
          target = $(node.querySelector('.server span'));
          server = selector.getValue().customProperties.server;
          if (server === null) {
            return target.html('all');
          } else {
            return window.endpoint.servers[server].get(function(err, data) {
              if (!data.success) {
                return;
              }
              return target.html(data.result.name);
            });
          }
        }, false);
        window.api.storage[uuid + '#' + selected] = selector;
        window.api.groups('', selector, selected);
        break;
      case 'admin__groups':
        server = node.querySelector('.icon.server');
        uuid = $(node.querySelector('input.uuid')).val();
        selected = $(node.querySelector('input.server')).val();
        if (selected === '') {
          selected = 'all';
        }
        target = server.querySelector('span');
        $(target).remove();
        $(server).htmlAppend(`<select id='server-${uuid}'></select>`);
        selector = new Choices(`#server-${uuid}`, {
          searchEnabled: false,
          choices: [],
          classNames: {
            containerOuter: 'choices edit small'
          }
        });
        actions = node.querySelector('.icon.group .actions');
        $(actions).removeClass('disabled').addClass('enabled');
        scope = cssPath(node);
        $(scope + " .icon.usetime").addClass('input-wrapper');
        $(scope + " .icon.usetime span i").remove();
        $(scope + " .icon.usetime span").on('focusout', function(event, ui) {
          var field, sd, seconds;
          field = $(this);
          sd = field.html();
          seconds = window.style.duration.parse(sd);
          if (sd !== '' && seconds === 0) {
            return field.css('border-bottom-color', '#FF404B');
          } else {
            field.css('border-bottom-color', '');
            return field.html(window.style.duration.string(seconds));
          }
        });
        $(scope + " .icon.immunity").addClass('input-wrapper');
        $(scope + " .icon.name").addClass('input-wrapper');
        $(scope + " .icon span").addClass('input');
        $(scope + " .icon span").attr('contenteditable', 'true');
        window.api.storage[uuid] = selector;
        window.api.servers('', selector, selected);
    }
    $(that).css('opacity', '0');
    setTimeout(function() {
      var transition;
      $(that).htmlAfter("<i class='save opacity animated' data-feather='save'></i>");
      feather.replace();
      transition = that.parentElement.querySelector('.save.opacity.animated');
      $(that).remove();
      // we need this timeout so that the transition can be applied properly
      // i know this is not the perfect way, but it is still better than twilight
      return setTimeout(function() {
        transition.setAttribute('onclick', trigger);
        return $(transition).css('opacity', '1');
      }, 300);
    }, 300);
  };

  submit = function(mode = '', that) {
    var data, i, j, len, node, now, ref, time, type, user;
    switch (mode) {
      case 'admin__administrator':
        data = {
          role: window.groupinput.getValue(true),
          promotion: true,
          force: true
        };
        user = window.usernameinput.getValue(true);
        window.endpoint.users[user].post(data, function(err, data) {
          if (data.success) {
            window.style.submit(that);
          } else {
            window.style.submit(that, false);
          }
          return data;
        });
        return setTimeout(function() {
          window.style.submit(that, false, true);
          return window.ajax.admin.admins(1);
        }, 3000);
      case 'admin__groups':
        data = {
          name: $("#inputgroupname").val(),
          server: window.serverinput.getValue(true),
          immunity: parseInt($("#inputimmunityvalue").val()),
          usetime: null,
          flags: ''
        };
        if (data.server === 'all') {
          data.server = null;
        }
        ref = $(".row.add .actions input:checked");
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          data.flags += $(i).val();
        }
        time = $("#inputtimevalue").val();
        if (time === !null || time !== '') {
          data.usetime = window.style.duration.parse(time);
        }
        window.endpoint.roles.put(data, function(err, data) {
          if (data.success) {
            window.style.submit(that);
          } else {
            window.style.submit(that, false);
          }
          return data;
        });
        return setTimeout(function() {
          window.style.submit(that, false, true);
          return window.ajax.ban.user(1);
        }, 3000);
      case 'ban':
        now = new Date();
        now = now.getTime() / 1000;
        time = $("#inputduration").val();
        if (time !== '') {
          time = new Date($("#inputduration").val());
          time = time.getTime() / 1000;
        } else {
          time = 0;
        }
        user = window.usernameinput.getValue(true);
        data = {
          reason: $("#inputdescription").val(),
          length: parseInt(time - now)
        };
        server = window.serverinput.getValue(true);
        if (server !== 'all') {
          data.server = server;
        }
        window.endpoint.users[user].ban.put(data, function(err, data) {
          if (data.success) {
            return window.style.submit(that);
          } else {
            return window.style.submit(that, false);
          }
        });
        return setTimeout(function() {
          window.style.submit(that, false, true);
          return window.ajax.ban.user(1);
        }, 3000);
      case 'mutegag':
        now = new Date();
        now = now.getTime() / 1000;
        time = $("#inputduration").val();
        if (time !== '') {
          time = new Date(time);
          time = time.getTime() / 1000;
        } else {
          time = 0;
        }
        user = window.usernameinput.getValue(true);
        type = '';
        $('.row.add .action .selected').each((function(e) {
          return type += e.id;
        }));
        if (type.match(/mute/) && type.match(/gag/)) {
          type = 'both';
        }
        if (type === '') {
          type = 'both';
        }
        data = {
          reason: $("#inputdescription").val(),
          length: parseInt(time - now),
          type: type
        };
        server = window.serverinput.getValue(true);
        if (server !== 'all') {
          data.server = server;
        }
        window.endpoint.users[user].mutegag.put(data, function(err, data) {
          if (data.success) {
            window.style.submit(that);
          } else {
            window.style.submit(that, false);
          }
          return data;
        });
        return setTimeout(function() {
          window.style.submit(that, false, true);
          return window.ajax.mutegag.user(1);
        }, 3000);
      case 'kick':
        return console.log('placeholder');
      case 'server':
        node = that.parentElement.parentElement.parentElement;
        data = {
          name: $("#inputservername").val(),
          ip: $('#inputip').val().match(/^([0-9]{1,3}\.){3}[0-9]{1,3}/)[0],
          port: parseInt($('#inputip').val().split(':')[1]),
          password: $('#inputpassword').val(),
          game: window.gameinput.getValue(true),
          mode: $('#inputmode').val()
        };
        window.endpoint.servers.put(data, function(err, data) {
          if (data.success) {
            window.style.submit(that);
          } else {
            window.style.submit(that, false);
          }
          return data;
        });
        return setTimeout(function() {
          window.style.submit(that, false, true);
          return window.ajax.server.server(1);
        }, 3000);
      default:
        return console.log('stuff');
    }
  };

  window.api = {
    servers: server,
    groups: group,
    submit: submit,
    remove: remove,
    edit: edit,
    storage: {}
  };

}).call(this);
