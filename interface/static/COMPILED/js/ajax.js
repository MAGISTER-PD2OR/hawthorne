// Generated by CoffeeScript 2.1.1
(function() {
  var ajax, date, lazy;

  ajax = function(mode, target = '.main', page = 1, manual = false, action = 'append') {
    var endpoint, header;
    endpoint = window.endpoint.ajax;
    header = {
      'X-CSRFToken': window.csrftoken
    };
    switch (mode) {
      case 'home[update]':
        endpoint = window.endpoint.ajax.system.update;
        break;
      case 'settings[tokens]':
        endpoint = window.endpoint.ajax.settings.tokens[page];
        break;
      case 'servers[overview]':
        endpoint = window.endpoint.ajax.servers[page];
        break;
      case 'servers[detailed][logs]':
        endpoint = window.endpoint.ajax.servers[window.slug].logs[page];
        break;
      case 'players[overview]':
        endpoint = window.endpoint.ajax.players[page];
        break;
      case 'players[detailed][actions]':
        endpoint = window.endpoint.ajax.players[window.slug].actions[page];
        break;
      case 'players[detailed][punishments]':
        endpoint = window.endpoint.ajax.players[window.slug].punishments[page];
        break;
      case 'players[detailed][logs]':
        endpoint = window.endpoint.ajax.players[window.slug].logs[window.pagination.current][page];
        break;
      case 'admins[servers][admins]':
        endpoint = window.endpoint.ajax.admins.servers.admins[page];
        break;
      case 'admins[servers][roles]':
        endpoint = window.endpoint.ajax.admins.servers.roles[page];
        break;
      case 'admins[web][admins]':
        endpoint = window.endpoint.ajax.admins.web.admins[page];
        break;
      case 'admins[web][groups]':
        endpoint = window.endpoint.ajax.admins.web.groups[page];
        break;
      case 'punishments[bans]':
        endpoint = window.endpoint.ajax.punishments.bans[page];
        break;
      case 'punishments[mutes]':
        endpoint = window.endpoint.ajax.punishments.mutes[page];
        break;
      case 'punishments[gags]':
        endpoint = window.endpoint.ajax.punishments.gags[page];
    }
    endpoint.post(header, {}, function(dummy, response) {
      var data, params, selected, url;
      data = response.data;
      target = $(target);
      if (response.status === 200) {
        if (page === 1 || manual) {
          target.html('');
        }
        switch (action) {
          case 'append':
            target.htmlAppend(data);
            break;
          case 'prepend':
            target.htmlPrepend(data);
            break;
          case 'before':
            target.htmlBefore(data);
            break;
          case 'after':
            target.htmlAfter(data);
        }
        $('script.execute:not(.evaluated)', target).forEach(function(src) {
          eval(src.innerHTML);
          return $(src).addClass('evaluated');
        });
        window._.init();
        switch (manual) {
          case true:
            if (page === 1) {
              $('.timeTableGo.fLeft').addClass('hidden');
            } else {
              $('.timeTableGo.fLeft').removeClass('hidden');
            }
            if (window.pagination.limitation === page) {
              $('.timeTableGo.fRight').addClass('hidden');
            } else {
              $('.timeTableGo.fRight').removeClass('hidden');
            }
            window.batch.forEach(function(e) {
              var append;
              append = true;
              Array.from(target[0].children).forEach(function(i) {
                if (i.getAttribute('data-id') === e.getAttribute('data-id')) {
                  $('input[type="checkbox"]', i)[0].checked = true;
                  $(i).addClass('logSelected');
                  return append = false;
                }
              });
              if (append) {
                return target[0].appendChild(e);
              }
            });
            selected = $('.logSelected', target);
            if (selected.length !== 0) {
              selected.slice(1).forEach(function(e) {
                return $('.checkboxDialogue', e).fadeOut('fast');
              });
              $('.checkboxDialogue', selected[0]).fadeIn('fast');
            }
            $('.paginationContent h3 .current')[0].innerHTML = page;
            window.pagination.current = page;
            url = new URL(document.location.href);
            params = new URLSearchParams(url.search.substring(1));
            params.set('page', page);
            url.search = `?${params.toString()}`;
            window.history.replaceState({
              'location': window._.location,
              'scope': window._.scope
            }, null, url.href);
            break;
          case false:
            window.ajax(mode, target, page + 1);
        }
      }
    });
  };

  date = function(mode, target = '.innerMain .CBox h3.center', forward = true) {
    var endpoint, header;
    endpoint = window.endpoint.ajax;
    header = {
      'X-CSRFToken': window.csrftoken
    };
    if (forward) {
      window.pagination.current += 1;
    } else {
      window.pagination.current -= 1;
    }
    switch (mode) {
      case 'players[detailed][logs]':
        endpoint = window.endpoint.ajax.players[window.slug].logs[window.pagination.current];
    }
    endpoint.post(header, {}, function(dummy, response) {
      target = $(target);
      if (window.pagination.current <= 1) {
        $('.timeTableGo.fLeft').addClass('invisible');
      } else {
        $('.timeTableGo.fLeft').removeClass('invisible');
      }
      if (window.pagination.limitation <= window.pagination.current) {
        $('.timeTableGo.fRight').addClass('invisible');
      } else {
        $('.timeTableGo.fRight').removeClass('invisible');
      }
      target.html(response.data);
      window.ajax(mode, '.paginationContent table tbody', 1);
    });
  };

  lazy = function(mode, fallback) {
    var a, endpoint, hash, header;
    window.batch = [];
    endpoint = window.endpoint.ajax;
    header = {
      'X-CSRFToken': window.csrftoken
    };
    if (window.location.hash) {
      hash = window.location.hash.substring(1);
    } else {
      hash = fallback;
      window.history.replaceState({
        location: window._.location,
        scope: window._.scope
      }, null, `#${fallback}`);
    }
    switch (mode) {
      case 'settings[overview]':
        endpoint = window.endpoint.ajax.settings[hash];
        break;
      case 'servers[detailed]':
        endpoint = window.endpoint.ajax.servers[window.slug][hash];
        break;
      case 'admins[servers]':
        endpoint = window.endpoint.ajax.admins.servers[hash];
        break;
      case 'admins[web]':
        endpoint = window.endpoint.ajax.admins.web[hash];
        break;
      case 'players[overview]':
        endpoint = window.endpoint.ajax.players;
        break;
      case 'players[detailed]':
        endpoint = window.endpoint.ajax.players[window.slug][hash];
        break;
      case 'punishments[bans]':
        endpoint = window.endpoint.ajax.punishments.bans;
        break;
      case 'punishments[mutes]':
        endpoint = window.endpoint.ajax.punishments.mutes;
        break;
      case 'punishments[gags]':
        endpoint = window.endpoint.ajax.punishments.gags;
    }
    a = new URLSearchParams(window.location.search.substring(1));
    endpoint.post(header, a, function(dummy, response) {
      var data, status, target;
      status = response.status;
      data = response.data;
      target = $('.main');
      if (status === 200) {
        $('.paginationContent', target).remove();
        target.htmlAppend(data);
        $('.paginationContent script.execute:not(.evaluated)', target).forEach(function(src) {
          eval(src.innerHTML);
          return $(src).addClass('evaluated');
        });
        window._.init();
      }
    });
  };

  window.ajax = ajax;

  window.lazy = lazy;

  window.date = date;

}).call(this);
