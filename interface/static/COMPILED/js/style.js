// Generated by CoffeeScript 2.1.1
(function() {
  var DatetoISO8601, InputVerification, insertHtml, mutegag__toggle, parseDuration, submit, toDurationString, to_seconds;

  insertHtml = function(value, position, nodes) {
    return nodes.forEach(function(item) {
      var e, results, tmpnode, tmpnodes;
      tmpnodes = document.createElement('div');
      tmpnodes.innerHTML = value;
      results = [];
      while ((tmpnode = tmpnodes.lastChild) !== null) {
        try {
          if (position === 'before') {
            results.push(item.parentNode.insertBefore(tmpnode, item));
          } else if (position === 'after') {
            results.push(item.parentNode.insertBefore(tmpnode, item.nextSibling));
          } else if (position === 'append') {
            results.push(item.appendChild(tmpnode));
          } else if (position === 'prepend') {
            results.push(item.insertBefore(tmpnode, item.firstChild));
          } else {
            results.push(void 0);
          }
        } catch (error) {
          e = error;
          break;
        }
      }
      return results;
    });
  };

  // original code from davesag
  // http://jsfiddle.net/davesag/qgCrk/6/
  to_seconds = function(dd, hh, mm) {
    var d, h, m, t;
    d = parseInt(dd);
    h = parseInt(hh);
    m = parseInt(mm);
    if (d == null) {
      d = 0;
    }
    if (h == null) {
      h = 0;
    }
    if (m == null) {
      m = 0;
    }
    // if (isNaN(d)) d = 0
    // if (isNaN(h)) h = 0
    // if (isNaN(m)) m = 0
    t = d * 24 * 60 * 60 + h * 60 * 60 + m * 60;
    return t;
  };

  // expects 1d 11h 11m, or 1d 11h,
  // or 11h 11m, or 11h, or 11m, or 1d
  // returns a number of seconds.
  parseDuration = function(sDuration) {
    var days, drx, hours, hrx, minutes, morx, mrx, wrx, yrx;
    if (sDuration === null || sDuration === '') {
      return 0;
    }
    mrx = new RegExp(/([0-9][0-9]?)[ ]?m(?:[^o]|$)/);
    hrx = new RegExp(/([0-9][0-9]?)[ ]?h/);
    drx = new RegExp(/([0-9]{1,2})[ ]?d/);
    wrx = new RegExp(/([0-9][0-9]?)[ ]?w/);
    morx = new RegExp(/([0-9][0-9]?)[ ]?mo/);
    yrx = new RegExp(/([0-9][0-9]?)[ ]?y/);
    days = 0;
    hours = 0;
    minutes = 0;
    if (morx.test(sDuration)) {
      days += morx.exec(sDuration)[1] * 31;
    }
    if (mrx.test(sDuration)) {
      minutes = mrx.exec(sDuration)[1];
    }
    if (hrx.test(sDuration)) {
      hours = hrx.exec(sDuration)[1];
    }
    if (drx.test(sDuration)) {
      days += drx.exec(sDuration)[1];
    }
    if (wrx.test(sDuration)) {
      days += wrx.exec(sDuration)[1] * 7;
    }
    if (yrx.test(sDuration)) {
      days += yrx.exec(sDuration)[1] * 365;
    }
    return to_seconds(days, hours, minutes);
  };

  // outputs a duration string based on
  // the number of seconds provided.
  // rounded off to the nearest 1 minute.
  toDurationString = function(iDuration) {
    var d, h, m, result;
    if (iDuration <= 0) {
      return '';
    }
    m = Math.floor((iDuration / 60) % 60);
    h = Math.floor((iDuration / 3600) % 24);
    d = Math.floor(iDuration / 86400);
    result = '';
    if (d > 0) {
      result = result + d + 'd ';
    }
    if (h > 0) {
      result = result + h + 'h ';
    }
    if (m > 0) {
      result = result + m + 'm ';
    }
    return result.substring(0, result.length - 1);
  };

  mutegag__toggle = function(that) {
    var i, j, len, ref, results, state;
    ref = that.children;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      state = i.getAttribute('class');
      if (state.match(/gray/)) {
        state = state.replace('gray', '');
        state += 'red selected';
      } else {
        state = state.replace('red', '');
        state = state.replace('selected', '');
        state += 'gray';
      }
      state = state.replace('  ', ' ');
      results.push(i.setAttribute('class', state));
    }
    return results;
  };

  DatetoISO8601 = function(obj) {
    var date, hours, minutes, month, year;
    year = obj.getFullYear();
    month = obj.getMonth().toString().length === 1 ? '0' + (obj.getMonth() + 1).toString() : obj.getMonth() + 1;
    date = obj.getDate().toString().length === 1 ? '0' + obj.getDate().toString() : obj.getDate();
    hours = obj.getHours().toString().length === 1 ? '0' + obj.getHours().toString() : obj.getHours();
    minutes = obj.getMinutes().toString().length === 1 ? '0' + obj.getMinutes().toString() : obj.getMinutes();
    return `${year}-${month}-${date}T${hours}:${minutes}`;
  };

  InputVerification = function(mode, event, that) {
    var character, keycode;
    keycode = void 0;
    if (window.event) {
      keycode = window.event.keyCode;
    } else if (event) {
      keycode = event.which;
    }
    character = String.fromCharCode(event.keyCode);
    switch (mode) {
      case 'single':
        if (keycode === 13) {
          return false;
        }
    }
    return true;
  };

  submit = function(that, success = true, cleanup = false) {
    var state;
    state = that.getAttribute('class');
    if (!state.match(/animated/)) {
      return false;
    }
    if (success && !state.match(/success/)) {
      state += ' success explicit green';
    }
    if (!success && !state.match(/fail/)) {
      state += ' fail explicit red';
    }
    if (cleanup) {
      state = state.replace(/explicit/g, '');
      state = state.replace(/green/g, '');
      state = state.replace(/red/g, '');
      state = state.replace(/fail/g, '');
      state = state.replace(/success/g, '');
      state = state.replace(/(\s+)/g, ' ');
    }
    return that.setAttribute('class', state);
  };

  window.style = {
    duration: {
      parse: parseDuration,
      string: toDurationString
    },
    mutegag: {
      toggle: mutegag__toggle
    },
    submit: submit,
    utils: {
      date: {
        convert: {
          to: {
            iso: DatetoISO8601
          }
        }
      },
      verify: {
        input: InputVerification
      }
    }
  };

  $(function() {});

  $.fn.hasClass = function(className) {
    return !!this[0] && this[0].classList.contains(className);
  };

  $.fn.addClass = function(className) {
    this.forEach(function(item) {
      var classList;
      classList = item.classList;
      return classList.add.apply(classList, className.split(/\s/));
    });
    return this;
  };

  $.fn.removeClass = function(className) {
    this.forEach(function(item) {
      var classList;
      classList = item.classList;
      return classList.remove.apply(classList, className.split(/\s/));
    });
    return this;
  };

  $.fn.toggleClass = function(className, b) {
    this.forEach(function(item) {
      var classList;
      classList = item.classList;
      if (typeof b !== 'boolean') {
        b = !classList.contains(className);
      }
      return classList[b != null ? b : {
        'add': 'remove'
      }].apply(classList, className.split(/\s/));
    });
    return this;
  };

  $.fn.css = function(property, value = null) {
    if (value === null) {
      console.log('this is not yet implemented');
    } else {
      this.forEach(function(item) {
        var e;
        try {
          return item.style[property] = value;
        } catch (error) {
          e = error;
          return console.error('Could not set css style property "' + property + '".');
        }
      });
    }
    return this;
  };

  $.fn.remove = function() {
    this.forEach(function(item) {
      return item.parentNode.removeChild(item);
    });
    return this;
  };

  $.fn.val = function(value = '') {
    if (value !== '') {
      this.forEach(function(item) {
        return item.value = value;
      });
    } else if (this[0]) {
      return this[0].value;
    }
    return this;
  };

  $.fn.html = function(value = '') {
    if (value !== '') {
      this.forEach(function(item) {
        return item.innerHTML = value;
      });
    }
    if (this[0]) {
      return this[0].innerHTML;
    }
    return this;
  };

  $.fn.htmlBefore = function(value) {
    insertHtml(value, 'before', this);
    return this;
  };

  $.fn.htmlAfter = function(value) {
    insertHtml(value, 'after', this);
    return this;
  };

  $.fn.htmlAppend = function(value) {
    insertHtml(value, 'append', this);
    return this;
  };

  $.fn.htmlPrepend = function(value) {
    insertHtml(value, 'prepend', this);
    return this;
  };

  window.cache = {};

  window.endpoint = {
    api: fermata.json("/api/v1"),
    ajax: fermata.raw({
      base: window.location.origin + "/ajax/v1"
    }),
    bare: fermata.raw({
      base: window.location.origin
    })
  };

}).call(this);
