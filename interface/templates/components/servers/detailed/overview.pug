- load i18n
- load staticfiles
- load utils

.paginationContent.ct1
  .section.group
    .col.span_1_of_2
      .CBox.nomargin
        h3 Activity in {% now "F" %} (Days)
        .chartContainer.nomargin
          canvas.serverChartMonthly
        script.execute.
          var ctx = document.getElementsByClassName("serverChartMonthly")[0].getContext('2d');
          var gradient = ctx.createLinearGradient(0, 0, 0, 400);
          gradient.addColorStop(0, 'rgba(0,169,255,0.2)');
          gradient.addColorStop(1, 'rgba(0,169,255,0)');
          var myChart = new Chart(ctx, {
          type: 'line',
          data: {
          labels: {{months|flatten:"0"|safe}},
          datasets: [{
          pointHoverBorderColor: '#0075b1',
          pointHoverBackgroundColor: '#fff',
          label: 'Players',
          data: {{months|flatten:"1"|safe}},
          backgroundColor: gradient,
          borderColor: [
          'rgb(0,169,255)'
          ],
          borderWidth: 4
          }]
          },
          options: {
          legend: {
          display: false
          },
          maintainAspectRatio: false,
          scales: {
          yAxes: [{
          display:false,
          gridLines: {
          color: 'transparent',
          },
          ticks: {
          beginAtZero:false,
          fontColor: 'white'
          }
          }],
          xAxes: [{
          display:false,
          gridLines: {
          color: 'transparent',
          },
          ticks: {
          fontColor: 'white',
          }
          }]
          }
          }
          });
          myChart.canvas.parentNode.style.height = '200px';
    .col.span_1_of_2
      .CBox.nomargin
        h3 Activity throughout time (Years)
        .chartContainer.nomargin
          canvas.serverChartAllTime
        script.execute.
          var ctx = document.getElementsByClassName("serverChartAllTime")[0].getContext('2d');
          var gradient = ctx.createLinearGradient(0, 0, 0, 400);
          gradient.addColorStop(0, 'rgba(0,169,255,0.2)');
          gradient.addColorStop(1, 'rgba(0,169,255,0)');
          var myChart = new Chart(ctx, {
          type: 'line',
          data: {
          labels: {{years|flatten:"0"|safe}},
          datasets: [{
          pointHoverBorderColor: '#0075b1',
          pointHoverBackgroundColor: '#fff',
          label: 'Players',
          data: {{years|flatten:"1"|safe}},
          backgroundColor: gradient,
          borderColor: [
          'rgb(0,169,255)'
          ],
          borderWidth: 4
          }]
          },
          options: {
          legend: {
          display: false
          },
          maintainAspectRatio: false,
          scales: {
          yAxes: [{
          display: false,
          gridLines: {
          color: "rgba(0, 0, 0, 0)",
          },
          ticks: {
          beginAtZero:false,
          fontColor: 'white'
          }
          }],
          xAxes: [{
          display: false,
          gridLines: {
          display: false,
          color: "rgba(0, 0, 0, 0)",
          },
          ticks: {
          fontColor: 'white',
          }
          }]
          }
          }
          });
          myChart.canvas.parentNode.style.height = '200px';
  .server.CBox
    .section.group.nomargin.serverOverview
      .col.span_1_of_2.nomargin
        .section.group.nomargin.serverOverview
          .col.span_1_of_2.nomargin
            if data.game == 'csgo'
              img.thumbnail(src="{% static 'img/games/csgo.png' %}")
            elif data.game == 'tf2'
              img.thumbnail(src="{% static 'img/games/tf2.png' %}")
            button.serverActionButton(disabled)
              i.fa.fa-stop
              |  Stop
            button.serverActionButton.nomargin(disabled)
              i.fa.fa-sync
              |  Restart
          .col.span_1_of_2.nomargin
            h2
              = data.name
              // .CTag Europe #1
            p
              i.fa.fa-gamepad(style="margin: 0 5px 0 0")
              = data.get_game_display
      .col.span_1_of_2.nomargin
        ul.list
          li
            b IP:
            a(href="javascript:void(0)", data-trigger="[clip/copy]", data-clipboard-text="{{data.ip}}:{{data.port}}")
              = data.ip|add:":"
              =data.port
              i.fa.fa-copy(style="margin-left:5px")
          li
            b Location:
            = location
          li
            b VAC:
            if data.vac
              i.ion.ion-ios-checkmark.green
            else
              i.ion.ion-ios-close.red
          li
            b Protected:
            if data.protected
              i.ion.ion-ios-checkmark.green
            else
              i.ion.ion-ios-close.red

          li
            b Uptime:
            = status.datapoint.uptime|duration
  .CBox.nomargin
    .section.group.nomargin.serverOverview
      .col.span_1_of_2.nomargin
        h2 Server Data
        p Data is constantly collected from the server and sent to your Hawthorne panel. We display things such as a list of players, what the current map is, how much time of the map that is remaining, how many admins are on, etc.
      .col.span_1_of_2.nomargin
        ul.list
          li
            b Map:
            = status.datapoint.map
          li
            b Time Left:
            if status.datapoint.time_left
              = status.datapoint.time_left|duration
              | -
              b Map change scheduled for
                = status.datapoint.time_left|warp|time
            else
              | indefinitely
          li
            b Gamemode:
            = data.mode
          li
            b Players:
            .playerCount(class="{%if status.datapoint.clients.count == data.max_clients%}fullPlayers{%endif%}")
              = status.datapoint.clients.count
              |  of
              = data.max_clients
            a(href="javascript:void(0)", data-trigger="[modal/open]", data-trigger-target="[modal/players]") View Players
            a(href="javascript:void(0)", style="margin-left:10px", data-trigger="[modal/open]", data-trigger-target="[modal/admins]") View Admins
